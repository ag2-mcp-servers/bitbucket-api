# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:21:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    confloat,
    conint,
    constr,
)


class FieldAttribute(Enum):
    public = 'public'
    read_only = 'read_only'


class ApplicationProperty(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_attributes: Optional[List[FieldAttribute]] = Field(None, alias='_attributes')


class Markup(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Summary(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')


class MergeStrategy(Enum):
    merge_commit = 'merge_commit'
    squash = 'squash'
    fast_forward = 'fast_forward'


class Kind(Enum):
    feature = 'feature'
    bugfix = 'bugfix'
    release = 'release'
    hotfix = 'hotfix'


class BranchType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind = Field(..., description='The kind of branch.')
    prefix: str = Field(
        ...,
        description='The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.',
    )


class BranchType1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.',
    )
    kind: Kind = Field(..., description='The kind of the branch type.')
    prefix: Optional[str] = Field(
        None,
        description='The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The `prefix` of an enabled branch type must be a valid branch prefix.Additionally, it cannot be blank, empty or `null`. The `prefix` for a disabled branch type can be empty or invalid.',
    )


class Development1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    is_valid: Optional[bool] = Field(
        None,
        description='Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.',
    )
    name: Optional[str] = Field(
        None,
        description='The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.',
    )
    use_mainbranch: Optional[bool] = Field(
        None,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.',
    )


class Self(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Production1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        None, description='Indicates if branch is enabled or not.'
    )
    is_valid: Optional[bool] = Field(
        None,
        description='Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.',
    )
    name: Optional[str] = Field(
        None,
        description='The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.',
    )
    use_mainbranch: Optional[bool] = Field(
        None,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.',
    )


class Content(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')


class Inline(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    from_: Optional[conint(ge=1)] = Field(
        None,
        alias='from',
        description="The comment's anchor line in the old version of the file.",
    )
    path: str = Field(
        ..., description='The path of the file this comment is anchored to.'
    )
    to: Optional[conint(ge=1)] = Field(
        None,
        description="The comment's anchor line in the new version of the file. If the 'from' line is also provided, this value will be removed.",
    )


class Code(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[Code] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Attributes(Enum):
    link = 'link'
    executable = 'executable'
    subrepository = 'subrepository'
    binary = 'binary'
    lfs = 'lfs'


class Commit1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    commit: Optional[Commit1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class State(Enum):
    INPROGRESS = 'INPROGRESS'
    SUCCESSFUL = 'SUCCESSFUL'
    STOPPED = 'STOPPED'
    FAILED = 'FAILED'


class Links3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Links4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Name(Enum):
    COMPLETED = 'COMPLETED'


class Name1(Enum):
    FAILED = 'FAILED'


class Name2(Enum):
    STOPPED = 'STOPPED'


class Name3(Enum):
    SUCCESSFUL = 'SUCCESSFUL'


class Name4(Enum):
    IN_PROGRESS = 'IN_PROGRESS'


class Name5(Enum):
    UNDEPLOYED = 'UNDEPLOYED'


class Status(Enum):
    added = 'added'
    removed = 'removed'
    modified = 'modified'
    renamed = 'renamed'


class BranchType2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind = Field(..., description='The kind of branch.')
    prefix: str = Field(
        ...,
        description='The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.',
    )


class Error1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[Dict[str, Any]] = Field(
        None, description='Optional structured data that is endpoint-specific.'
    )
    detail: Optional[str] = None
    message: str


class Error(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: Optional[Error1] = None
    type: str


class ExportOptions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    include_attachments: Optional[bool] = None
    project_key: Optional[str] = None
    project_name: Optional[str] = None
    send_email: Optional[bool] = None
    type: str


class Links5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Event(Enum):
    pullrequest_changes_request_created = 'pullrequest:changes_request_created'
    pullrequest_rejected = 'pullrequest:rejected'
    issue_updated = 'issue:updated'
    pullrequest_unapproved = 'pullrequest:unapproved'
    pullrequest_comment_deleted = 'pullrequest:comment_deleted'
    repo_commit_status_updated = 'repo:commit_status_updated'
    pullrequest_changes_request_removed = 'pullrequest:changes_request_removed'
    pullrequest_comment_created = 'pullrequest:comment_created'
    repo_transfer = 'repo:transfer'
    pullrequest_fulfilled = 'pullrequest:fulfilled'
    repo_commit_comment_created = 'repo:commit_comment_created'
    issue_comment_created = 'issue:comment_created'
    project_updated = 'project:updated'
    pullrequest_comment_updated = 'pullrequest:comment_updated'
    repo_created = 'repo:created'
    repo_fork = 'repo:fork'
    repo_updated = 'repo:updated'
    repo_push = 'repo:push'
    pullrequest_approved = 'pullrequest:approved'
    repo_deleted = 'repo:deleted'
    repo_commit_status_created = 'repo:commit_status_created'
    repo_imported = 'repo:imported'
    issue_created = 'issue:created'
    pullrequest_updated = 'pullrequest:updated'
    pullrequest_created = 'pullrequest:created'


class HookEvent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    category: Optional[str] = Field(
        None, description='The category this event belongs to.'
    )
    description: Optional[str] = Field(
        None, description='More detailed description of the webhook event type.'
    )
    event: Optional[Event] = Field(None, description='The event identifier.')
    label: Optional[str] = Field(None, description='Summary of the webhook event type.')


class Content1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')


class Kind3(Enum):
    bug = 'bug'
    enhancement = 'enhancement'
    proposal = 'proposal'
    task = 'task'


class Attachments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Comments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Vote(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Watch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    attachments: Optional[Attachments] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    comments: Optional[Comments] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    vote: Optional[Vote] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    watch: Optional[Watch] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Priority(Enum):
    trivial = 'trivial'
    minor = 'minor'
    major = 'major'
    critical = 'critical'
    blocker = 'blocker'


class State1(Enum):
    new = 'new'
    open = 'open'
    resolved = 'resolved'
    on_hold = 'on hold'
    invalid = 'invalid'
    duplicate = 'duplicate'
    wontfix = 'wontfix'
    closed = 'closed'


class Links7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Assignee(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class Component1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class Content2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class Kind4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class Milestone1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class Priority1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class State2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class Title(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class Version1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    new: Optional[str] = None
    old: Optional[str] = None


class Changes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assignee: Optional[Assignee] = None
    component: Optional[Component1] = None
    content: Optional[Content2] = None
    kind: Optional[Kind4] = None
    milestone: Optional[Milestone1] = None
    priority: Optional[Priority1] = None
    state: Optional[State2] = None
    title: Optional[Title] = None
    version: Optional[Version1] = None


class Issue1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    issue: Optional[Issue1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Message(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')


class Status1(Enum):
    ACCEPTED = 'ACCEPTED'
    STARTED = 'STARTED'
    RUNNING = 'RUNNING'
    FAILURE = 'FAILURE'


class IssueJobStatus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: Optional[int] = Field(
        None, description='The total number of issues already imported/exported'
    )
    pct: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None, description='The percentage of issues already imported/exported'
    )
    phase: Optional[str] = Field(None, description='The phase of the import/export job')
    status: Optional[Status1] = Field(
        None, description='The status of the import/export job'
    )
    total: Optional[int] = Field(
        None, description='The total number of issues being imported/exported'
    )
    type: Optional[str] = None


class Link(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Object(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type: str


class Page(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )


class PaginatedHookEvents(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[HookEvent]] = Field(None, min_length=0)


class Role(Enum):
    PARTICIPANT = 'PARTICIPANT'
    REVIEWER = 'REVIEWER'


class State3Enum(Enum):
    approved = 'approved'
    changes_requested = 'changes_requested'


class State3(RootModel[Optional[State3Enum]]):
    root: Optional[State3Enum] = None


class PipelineBuildNumber(Object):
    next: Optional[int] = Field(
        None, description='The next number that will be used as build number.'
    )


class PipelineCache(Object):
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the cache was created.'
    )
    file_size_bytes: Optional[int] = Field(
        None, description='The size of the file containing the archive of the cache.'
    )
    key_hash: Optional[str] = Field(
        None, description='The key hash of the cache version.'
    )
    name: Optional[str] = Field(None, description='The name of the cache.')
    path: Optional[str] = Field(
        None, description='The path where the cache contents were retrieved from.'
    )
    pipeline_uuid: Optional[str] = Field(
        None, description='The UUID of the pipeline that created the cache.'
    )
    step_uuid: Optional[str] = Field(
        None, description='The uuid of the step that created the cache.'
    )
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the pipeline cache.'
    )


class PipelineCacheContentUri(BaseModel):
    uri: Optional[AnyUrl] = Field(
        None, description='The uri for pipeline cache content.'
    )


class PipelineCommand(BaseModel):
    command: Optional[str] = Field(None, description='The executable command.')
    name: Optional[str] = Field(None, description='The name of the command.')


class PipelineError(Object):
    key: Optional[str] = Field(None, description='The error key.')
    message: Optional[str] = Field(None, description='The error message.')


class PipelineImage(BaseModel):
    email: Optional[str] = Field(
        None,
        description='The email needed to authenticate with the Docker registry. Only required when using a private Docker image.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the image. If the image is hosted on DockerHub the short name can be used, otherwise the fully qualified name is required here.',
    )
    password: Optional[str] = Field(
        None,
        description='The password needed to authenticate with the Docker registry. Only required when using a private Docker image.',
    )
    username: Optional[str] = Field(
        None,
        description='The username needed to authenticate with the Docker registry. Only required when using a private Docker image.',
    )


class RefType(Enum):
    branch = 'branch'
    tag = 'tag'
    named_branch = 'named_branch'
    bookmark = 'bookmark'


PipelineScheduleExecution = Object


class PipelineScheduleExecutionErrored(PipelineScheduleExecution):
    error: Optional[PipelineError] = None


class Type(Enum):
    branches = 'branches'
    tags = 'tags'
    bookmarks = 'bookmarks'
    default = 'default'
    custom = 'custom'


class PipelineSelector(Object):
    pattern: Optional[str] = Field(
        None, description='The name of the matching pipeline definition.'
    )
    type: Optional[Type] = Field(None, description='The type of selector.')


class PipelineSshKeyPair(Object):
    private_key: Optional[str] = Field(
        None,
        description='The SSH private key. This value will be empty when retrieving the SSH key pair.',
    )
    public_key: Optional[str] = Field(None, description='The SSH public key.')


class PipelineSshPublicKey(Object):
    key: Optional[str] = Field(None, description='The base64 encoded public key.')
    key_type: Optional[str] = Field(None, description='The type of the public key.')
    md5_fingerprint: Optional[str] = Field(
        None, description='The MD5 fingerprint of the public key.'
    )
    sha256_fingerprint: Optional[str] = Field(
        None, description='The SHA-256 fingerprint of the public key.'
    )


PipelineState = Object


class Name6(Enum):
    COMPLETED = 'COMPLETED'


class Name7(Enum):
    ERROR = 'ERROR'


class Name8(Enum):
    EXPIRED = 'EXPIRED'


class Name9(Enum):
    FAILED = 'FAILED'


PipelineStateCompletedResult = Object


class Name10(Enum):
    STOPPED = 'STOPPED'


class PipelineStateCompletedStopped(PipelineStateCompletedResult):
    name: Optional[Name10] = Field(
        None, description='The name of the stopped result (STOPPED).'
    )


class Name11(Enum):
    SUCCESSFUL = 'SUCCESSFUL'


class PipelineStateCompletedSuccessful(PipelineStateCompletedResult):
    name: Optional[Name11] = Field(
        None, description='The name of the successful result (SUCCESSFUL).'
    )


class Name12(Enum):
    IN_PROGRESS = 'IN_PROGRESS'


class Name13(Enum):
    PAUSED = 'PAUSED'


class Name14(Enum):
    RUNNING = 'RUNNING'


PipelineStateInProgressStage = Object


class Name15(Enum):
    PENDING = 'PENDING'


class PipelineStatePending(PipelineState):
    name: Optional[Name15] = Field(
        None, description='The name of pipeline state (PENDING).'
    )


class PipelineStepError(Object):
    key: Optional[str] = Field(None, description='The error key.')
    message: Optional[str] = Field(None, description='The error message.')


PipelineStepState = Object


class Name16(Enum):
    COMPLETED = 'COMPLETED'


class Name17(Enum):
    ERROR = 'ERROR'


class Name18(Enum):
    EXPIRED = 'EXPIRED'


class Name19(Enum):
    FAILED = 'FAILED'


class Name20(Enum):
    NOT_RUN = 'NOT_RUN'


PipelineStepStateCompletedResult = Object


class Name21(Enum):
    STOPPED = 'STOPPED'


class PipelineStepStateCompletedStopped(PipelineStepStateCompletedResult):
    name: Optional[Name21] = Field(None, description='The name of the result (STOPPED)')


class Name22(Enum):
    SUCCESSFUL = 'SUCCESSFUL'


class PipelineStepStateCompletedSuccessful(PipelineStepStateCompletedResult):
    name: Optional[Name22] = Field(
        None, description='The name of the result (SUCCESSFUL)'
    )


class Name23(Enum):
    IN_PROGRESS = 'IN_PROGRESS'


class PipelineStepStateInProgress(PipelineStepState):
    name: Optional[Name23] = Field(
        None, description='The name of pipeline step state (IN_PROGRESS).'
    )


class Name24(Enum):
    PENDING = 'PENDING'


class PipelineStepStatePending(PipelineStepState):
    name: Optional[Name24] = Field(
        None, description='The name of pipeline step state (PENDING).'
    )


class Name25(Enum):
    READY = 'READY'


class PipelineStepStateReady(PipelineStepState):
    name: Optional[Name25] = Field(
        None, description='The name of pipeline step state (READY).'
    )


PipelineTarget = Object


PipelineTrigger = Object


PipelineTriggerManual = PipelineTrigger


PipelineTriggerPush = PipelineTrigger


class PipelineVariable(Object):
    key: Optional[str] = Field(None, description='The unique name of the variable.')
    secured: Optional[bool] = Field(
        None,
        description='If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.',
    )
    uuid: Optional[str] = Field(None, description='The UUID identifying the variable.')
    value: Optional[str] = Field(
        None,
        description='The value of the variable. If the variable is secured, this will be empty.',
    )


PipelinesDdevPipelineStep = Object


PipelinesStgWestPipelineStep = Object


class Avatar(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar: Optional[Avatar] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Kind5(Enum):
    feature = 'feature'
    bugfix = 'bugfix'
    release = 'release'
    hotfix = 'hotfix'


class BranchType3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind5 = Field(..., description='The kind of branch.')
    prefix: str = Field(
        ...,
        description='The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.',
    )


class Development3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name of the target branch. If inherited by a repository, it will default to the main branch if the specified branch does not exist.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class Production3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name of the target branch. If inherited by a repository, it will default to the main branch if the specified branch does not exist.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class ProjectBranchingModel(Object):
    branch_types: Optional[List[BranchType3]] = Field(
        None, description='The active branch types.', max_length=4, min_length=0
    )
    development: Optional[Development3] = None
    production: Optional[Production3] = None


class Links11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Activity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Approve(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Commits(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Decline(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Diff(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Diffstat1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Merge(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    activity: Optional[Activity] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    approve: Optional[Approve] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    comments: Optional[Comments] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    commits: Optional[Commits] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    decline: Optional[Decline] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    diff: Optional[Diff] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    diffstat: Optional[Diffstat1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    merge: Optional[Merge] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class MergeCommit(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hash: Optional[constr(pattern=r'[0-9a-f]{7,}?')] = None


class Description(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')


class Reason(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')


class Title1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')


class Rendered(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[Description] = None
    reason: Optional[Reason] = None
    title: Optional[Title1] = None


class State4(Enum):
    OPEN = 'OPEN'
    MERGED = 'MERGED'
    DECLINED = 'DECLINED'
    SUPERSEDED = 'SUPERSEDED'


class Summary1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')


class Branch1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    default_merge_strategy: Optional[str] = Field(
        None,
        description='The default merge strategy, when this endpoint is the destination of the pull request.',
    )
    merge_strategies: Optional[List[MergeStrategy]] = Field(
        None,
        description='Available merge strategies, when this endpoint is the destination of the pull request.',
    )
    name: Optional[str] = None


class Commit2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hash: Optional[constr(pattern=r'[0-9a-f]{7,}?')] = None


class PullrequestMergeParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    close_source_branch: Optional[bool] = Field(
        None,
        description='Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False',
    )
    merge_strategy: Optional[MergeStrategy] = Field(
        'merge_commit',
        description='The merge strategy that will be used to merge the pull request.',
    )
    message: Optional[str] = Field(
        None,
        description='The commit message that will be used on the resulting commit.',
    )
    type: str


class Links13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    commits: Optional[Commits] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class ReportType(Enum):
    SECURITY = 'SECURITY'
    COVERAGE = 'COVERAGE'
    TEST = 'TEST'
    BUG = 'BUG'


class Result(Enum):
    PASSED = 'PASSED'
    FAILED = 'FAILED'
    PENDING = 'PENDING'


class AnnotationType(Enum):
    VULNERABILITY = 'VULNERABILITY'
    CODE_SMELL = 'CODE_SMELL'
    BUG = 'BUG'


class Result1(Enum):
    PASSED = 'PASSED'
    FAILED = 'FAILED'
    SKIPPED = 'SKIPPED'
    IGNORED = 'IGNORED'


class Severity(Enum):
    CRITICAL = 'CRITICAL'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'


class ReportAnnotation(Object):
    annotation_type: Optional[AnnotationType] = Field(
        None, description='The type of the report.'
    )
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the report was created.'
    )
    details: Optional[str] = Field(
        None,
        description='The details to show to users when clicking on the annotation.',
    )
    external_id: Optional[str] = Field(
        None,
        description="ID of the annotation provided by the annotation creator. It can be used to identify the annotation as an alternative to it's generated uuid. It is not used by Bitbucket, but only by the annotation creator for updating or deleting this specific annotation. Needs to be unique.",
    )
    line: Optional[conint(ge=1)] = Field(
        None,
        description='The line number that the annotation should belong to. If no line number is provided, then it will default to 0 and in a pull request it will appear at the top of the file specified by the path field.',
    )
    link: Optional[AnyUrl] = Field(
        None, description='A URL linking to the annotation in an external tool.'
    )
    path: Optional[str] = Field(
        None,
        description='The path of the file on which this annotation should be placed. This is the path of the file relative to the git repository. If no path is provided, then it will appear in the overview modal on all pull requests where the tip of the branch is the given commit, regardless of which files were modified.',
    )
    result: Optional[Result1] = Field(
        None,
        description='The state of the report. May be set to PENDING and later updated.',
    )
    severity: Optional[Severity] = Field(
        None, description='The severity of the annotation.'
    )
    summary: Optional[str] = Field(None, description='The message to display to users.')
    updated_on: Optional[datetime] = Field(
        None, description='The timestamp when the report was updated.'
    )
    uuid: Optional[str] = Field(
        None, description='The UUID that can be used to identify the annotation.'
    )


class Type1(Enum):
    BOOLEAN = 'BOOLEAN'
    DATE = 'DATE'
    DURATION = 'DURATION'
    LINK = 'LINK'
    NUMBER = 'NUMBER'
    PERCENTAGE = 'PERCENTAGE'
    TEXT = 'TEXT'


class ReportData(BaseModel):
    title: Optional[str] = Field(
        None, description='A string describing what this data field represents.'
    )
    type: Optional[Type1] = Field(
        None,
        description='The type of data contained in the value field. If not provided, then the value will be detected as a boolean, number or string.',
    )
    value: Optional[Dict[str, Any]] = Field(
        None, description='The value of the data element.'
    )


class ForkPolicy(Enum):
    allow_forks = 'allow_forks'
    no_public_forks = 'no_public_forks'
    no_forks = 'no_forks'


class CloneItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Downloads(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Forks(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Hooks(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Pullrequests(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Watchers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar: Optional[Avatar] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    clone: Optional[List[CloneItem]] = None
    commits: Optional[Commits] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    downloads: Optional[Downloads] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    forks: Optional[Forks] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    hooks: Optional[Hooks] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    pullrequests: Optional[Pullrequests] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    watchers: Optional[Watchers] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Scm(Enum):
    git = 'git'


class Links15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Permission(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'
    none = 'none'


class RepositoryInheritanceState(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    override_settings: Optional[Dict[str, Any]] = None
    type: str


class Links16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class SearchSegment(BaseModel):
    match: Optional[bool] = None
    text: Optional[str] = None


class Links17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Links18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    diff: Optional[Diff] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Links19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class SshKey(Object):
    comment: Optional[str] = Field(
        None, description='The comment parsed from the SSH key (if present)'
    )
    created_on: Optional[datetime] = None
    key: Optional[str] = Field(
        None, description='The SSH public key value in OpenSSH format.'
    )
    label: Optional[str] = Field(
        None, description='The user-defined label for the SSH key'
    )
    last_used: Optional[datetime] = None
    links: Optional[Links19] = None
    uuid: Optional[str] = Field(None, description="The SSH key's immutable ID.")


StgWestReport = Object


class Events(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Repository1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    events: Optional[Events] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Workspace1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    events: Optional[Events] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class SubjectTypes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    repository: Optional[Repository1] = None
    workspace: Optional[Workspace1] = None


class Links20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Version(Object):
    id: Optional[int] = None
    links: Optional[Links20] = None
    name: Optional[str] = None


class SubjectType(Enum):
    repository = 'repository'
    workspace = 'workspace'


class WebhookSubscription(Object):
    active: Optional[bool] = None
    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None, description='A user-defined description of the webhook.'
    )
    events: Optional[List[Event]] = Field(
        None, description='The events this webhook is subscribed to.', min_length=1
    )
    subject: Optional[Object] = None
    subject_type: Optional[SubjectType] = Field(
        None,
        description='The type of entity. Set to either `repository` or `workspace` based on where the subscription is defined.',
    )
    url: Optional[AnyUrl] = Field(None, description='The URL events get delivered to.')
    uuid: Optional[str] = Field(None, description="The webhook's id")


class Members(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Owners(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Projects(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Repositories(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Snippets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar: Optional[Avatar] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    members: Optional[Members] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    owners: Optional[Owners] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    projects: Optional[Projects] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    repositories: Optional[Repositories] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    snippets: Optional[Snippets] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Workspace(Object):
    created_on: Optional[datetime] = None
    is_private: Optional[bool] = Field(
        None,
        description='Indicates whether the workspace is publicly accessible, or whether it is\nprivate to the members and consequently only visible to members.',
    )
    links: Optional[Links21] = None
    name: Optional[str] = Field(None, description='The name of the workspace.')
    slug: Optional[str] = Field(
        None, description='The short label that identifies this workspace.'
    )
    updated_on: Optional[datetime] = None
    uuid: Optional[str] = Field(None, description="The workspace's immutable id.")


class Links22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Role1(Enum):
    admin = 'admin'
    contributor = 'contributor'
    member = 'member'
    owner = 'owner'


class RepositoriesWorkspaceRepoSlugCommitCommitReportsReportIdAnnotationsPostRequest(
    RootModel[List[ReportAnnotation]]
):
    root: List[ReportAnnotation] = Field(..., max_length=100, min_length=1)


class RepositoriesWorkspaceRepoSlugCommitCommitReportsReportIdAnnotationsPostResponse(
    RootModel[List[ReportAnnotation]]
):
    root: List[ReportAnnotation]


class Format(Enum):
    meta = 'meta'


class Format2(Enum):
    meta = 'meta'
    rendered = 'rendered'


class Role7(Enum):
    owner = 'owner'
    contributor = 'contributor'
    member = 'member'


class Role11(Enum):
    owner = 'owner'
    collaborator = 'collaborator'
    member = 'member'


class AccountLinks(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    avatar: Optional[Link] = None


class BranchingModelSettings(Object):
    branch_types: Optional[List[BranchType1]] = Field(None, max_length=4, min_length=0)
    development: Optional[Development1] = None
    links: Optional[Links] = None
    production: Optional[Production1] = None


class Commitstatus(Object):
    created_on: Optional[datetime] = None
    description: Optional[str] = Field(
        None, description='A description of the build (e.g. "Unit tests in Bamboo")'
    )
    key: Optional[str] = Field(
        None,
        description='An identifier for the status that\'s unique to\n        its type (current "build" is the only supported type) and the vendor,\n        e.g. BB-DEPLOY',
    )
    links: Optional[Links2] = None
    name: Optional[str] = Field(
        None, description='An identifier for the build itself, e.g. BB-DEPLOY-1'
    )
    refname: Optional[str] = Field(
        None,
        description='\nThe name of the ref that pointed to this commit at the time the status\nobject was created. Note that this the ref may since have moved off of\nthe commit. This optional field can be useful for build systems whose\nbuild triggers and configuration are branch-dependent (e.g. a Pipeline\nbuild).\nIt is legitimate for this field to not be set, or even apply (e.g. a\nstatic linting job).',
    )
    state: Optional[State] = Field(
        None, description='Provides some indication of the status of this commit'
    )
    updated_on: Optional[datetime] = None
    url: Optional[str] = Field(
        None,
        description='A URL linking back to the vendor or build system, for providing more information about whatever process produced this status. Accepts context variables `repository` and `commit` that Bitbucket will evaluate at runtime whenever at runtime. For example, one could use https://foo.com/builds/{repository.full_name} which Bitbucket will turn into https://foo.com/builds/foo/bar at render time.',
    )
    uuid: Optional[str] = Field(None, description="The commit status' id.")


class Component(Object):
    id: Optional[int] = None
    links: Optional[Links3] = None
    name: Optional[str] = None


DdevReport = Object


class DeploymentEnvironment(Object):
    name: Optional[str] = Field(None, description='The name of the environment.')
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


class DeploymentEnvironmentLock(Object):
    environmentUuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


DeploymentState = Object


DeploymentStateCompletedStatus = Object


class DeploymentStateCompletedStatusFailed(DeploymentStateCompletedStatus):
    name: Optional[Name1] = Field(
        None, description='The name of the completed deployment status (FAILED).'
    )


class DeploymentStateCompletedStatusStopped(DeploymentStateCompletedStatus):
    name: Optional[Name2] = Field(
        None, description='The name of the completed deployment status (STOPPED).'
    )


class DeploymentStateCompletedStatusSuccessful(DeploymentStateCompletedStatus):
    name: Optional[Name3] = Field(
        None, description='The name of the completed deployment status (SUCCESSFUL).'
    )


class DeploymentStateUndeployed(DeploymentState):
    name: Optional[Name5] = Field(
        None, description='The name of deployment state (UNDEPLOYED).'
    )
    trigger_url: Optional[AnyUrl] = Field(
        None, description='Link to trigger the deployment.'
    )


class DeploymentVariable(Object):
    key: Optional[str] = Field(None, description='The unique name of the variable.')
    secured: Optional[bool] = Field(
        None,
        description='If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.',
    )
    uuid: Optional[str] = Field(None, description='The UUID identifying the variable.')
    value: Optional[str] = Field(
        None,
        description='The value of the variable. If the variable is secured, this will be empty.',
    )


class DeploymentsDdevDeploymentEnvironment(Object):
    name: Optional[str] = Field(None, description='The name of the environment.')
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


class DeploymentsDdevDeploymentEnvironmentLock(Object):
    environmentUuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


class DeploymentsDdevPaginatedEnvironments(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[DeploymentsDdevDeploymentEnvironment]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class DeploymentsStgWestDeploymentEnvironment(Object):
    name: Optional[str] = Field(None, description='The name of the environment.')
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


class DeploymentsStgWestDeploymentEnvironmentLock(Object):
    environmentUuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


class DeploymentsStgWestPaginatedEnvironments(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[DeploymentsStgWestDeploymentEnvironment]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class IssueAttachment(Object):
    links: Optional[Links7] = None
    name: Optional[str] = None


JiraProject = Object


JiraSite = Object


class Milestone(Object):
    id: Optional[int] = None
    links: Optional[Links9] = None
    name: Optional[str] = None


class PaginatedAnnotations(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[ReportAnnotation]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedCommitstatuses(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Commitstatus]] = Field(None, min_length=0)


class PaginatedComponents(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Component]] = Field(None, min_length=0)


class PaginatedDeploymentVariable(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[DeploymentVariable]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedEnvironments(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[DeploymentEnvironment]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedIssueAttachments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[IssueAttachment]] = Field(None, min_length=0)


class PaginatedMilestones(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Milestone]] = Field(None, min_length=0)


class PaginatedPipelineCaches(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[PipelineCache]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedPipelineScheduleExecutions(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[PipelineScheduleExecution]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedPipelineVariables(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[PipelineVariable]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedVersions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Version]] = Field(None, min_length=0)


class PaginatedWebhookSubscriptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[WebhookSubscription]] = Field(None, min_length=0)


class PaginatedWorkspaces(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Workspace]] = Field(None, min_length=0)


class PipelineKnownHost(Object):
    hostname: Optional[str] = Field(None, description='The hostname of the known host.')
    public_key: Optional[PipelineSshPublicKey] = None
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the known host.'
    )


class PipelineSchedule(Object):
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the schedule was created.'
    )
    cron_pattern: Optional[str] = Field(
        None, description='The cron expression that the schedule applies.'
    )
    enabled: Optional[bool] = Field(
        None, description='Whether the schedule is enabled.'
    )
    selector: Optional[PipelineSelector] = None
    target: Optional[PipelineTarget] = None
    updated_on: Optional[datetime] = Field(
        None, description='The timestamp when the schedule was updated.'
    )
    uuid: Optional[str] = Field(None, description='The UUID identifying the schedule.')


class PipelineStateCompleted(PipelineState):
    name: Optional[Name6] = Field(
        None, description='The name of pipeline state (COMPLETED).'
    )
    result: Optional[PipelineStateCompletedResult] = None


class PipelineStateCompletedError(PipelineStateCompletedResult):
    error: Optional[PipelineError] = None
    name: Optional[Name7] = Field(None, description='The name of the result (ERROR)')


class PipelineStateCompletedExpired(PipelineStateCompletedResult):
    name: Optional[Name8] = Field(
        None, description='The name of the stopped result (EXPIRED).'
    )


class PipelineStateCompletedFailed(PipelineStateCompletedResult):
    name: Optional[Name9] = Field(
        None, description='The name of the failed result (FAILED).'
    )


class PipelineStateInProgress(PipelineState):
    name: Optional[Name12] = Field(
        None, description='The name of pipeline state (IN_PROGRESS).'
    )
    stage: Optional[PipelineStateInProgressStage] = None


class PipelineStateInProgressPaused(PipelineStateInProgressStage):
    name: Optional[Name13] = Field(None, description='The name of the stage (PAUSED)')


class PipelineStateInProgressRunning(PipelineStateInProgressStage):
    name: Optional[Name14] = Field(None, description='The name of the stage (RUNNING)')


class PipelineStep(Object):
    completed_on: Optional[datetime] = Field(
        None,
        description='The timestamp when the step execution was completed. This is not set if the step is still in progress.',
    )
    image: Optional[PipelineImage] = None
    script_commands: Optional[List[PipelineCommand]] = Field(
        None,
        description='The list of build commands. These commands are executed in the build container.',
    )
    setup_commands: Optional[List[PipelineCommand]] = Field(
        None,
        description='The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.',
    )
    started_on: Optional[datetime] = Field(
        None,
        description="The timestamp when the step execution was started. This is not set when the step hasn't executed yet.",
    )
    state: Optional[PipelineStepState] = None
    uuid: Optional[str] = Field(None, description='The UUID identifying the step.')


class PipelineStepStateCompleted(PipelineStepState):
    name: Optional[Name16] = Field(
        None, description='The name of pipeline step state (COMPLETED).'
    )
    result: Optional[PipelineStepStateCompletedResult] = None


class PipelineStepStateCompletedError(PipelineStepStateCompletedResult):
    error: Optional[PipelineStepError] = None
    name: Optional[Name17] = Field(None, description='The name of the result (ERROR)')


class PipelineStepStateCompletedExpired(PipelineStepStateCompletedResult):
    name: Optional[Name18] = Field(None, description='The name of the result (EXPIRED)')


class PipelineStepStateCompletedFailed(PipelineStepStateCompletedResult):
    name: Optional[Name19] = Field(None, description='The name of the result (FAILED)')


class PipelineStepStateCompletedNotRun(PipelineStepStateCompletedResult):
    name: Optional[Name20] = Field(None, description='The name of the result (NOT_RUN)')


class Report(Object):
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the report was created.'
    )
    data: Optional[List[ReportData]] = Field(
        None,
        description='An array of data fields to display information on the report. Maximum 10.',
    )
    details: Optional[str] = Field(
        None, description='A string to describe the purpose of the report.'
    )
    external_id: Optional[str] = Field(
        None,
        description="ID of the report provided by the report creator. It can be used to identify the report as an alternative to it's generated uuid. It is not used by Bitbucket, but only by the report creator for updating or deleting this specific report. Needs to be unique.",
    )
    link: Optional[AnyUrl] = Field(
        None,
        description='A URL linking to the results of the report in an external tool.',
    )
    logo_url: Optional[AnyUrl] = Field(
        None,
        description='A URL to the report logo. If none is provided, the default insights logo will be used.',
    )
    remote_link_enabled: Optional[bool] = Field(
        None,
        description='If enabled, a remote link is created in Jira for the issue associated with the commit the report belongs to.',
    )
    report_type: Optional[ReportType] = Field(
        None, description='The type of the report.'
    )
    reporter: Optional[str] = Field(
        None,
        description='A string to describe the tool or company who created the report.',
    )
    result: Optional[Result] = Field(
        None,
        description='The state of the report. May be set to PENDING and later updated.',
    )
    title: Optional[str] = Field(None, description='The title of the report.')
    updated_on: Optional[datetime] = Field(
        None, description='The timestamp when the report was updated.'
    )
    uuid: Optional[str] = Field(
        None, description='The UUID that can be used to identify the report.'
    )


class SearchLine(BaseModel):
    line: Optional[int] = None
    segments: Optional[List[SearchSegment]] = None


class TeamLinks(AccountLinks):
    html: Optional[Link] = None
    members: Optional[Link] = None
    projects: Optional[Link] = None
    repositories: Optional[Link] = None
    self: Optional[Link] = None


class UserLinks(AccountLinks):
    html: Optional[Link] = None
    repositories: Optional[Link] = None
    self: Optional[Link] = None


class Account(Object):
    created_on: Optional[datetime] = None
    display_name: Optional[str] = None
    links: Optional[AccountLinks] = None
    username: Optional[constr(pattern=r'^[a-zA-Z0-9_\-]+$')] = None
    uuid: Optional[str] = None


class AppUser(Account):
    account_id: Optional[str] = Field(
        None, description="The user's Atlassian account ID."
    )
    account_status: Optional[str] = Field(
        None,
        description='The status of the account. Currently the only possible value is "active", but more values may be added in the future.',
    )
    kind: Optional[str] = Field(None, description='The kind of App User.')


class Author(Object):
    raw: Optional[str] = Field(
        None,
        description='The raw author value from the repository. This may be the only value available if the author does not match a user in Bitbucket.',
    )
    user: Optional[Account] = None


class BaseCommit(Object):
    author: Optional[Author] = None
    date: Optional[datetime] = None
    hash: Optional[constr(pattern=r'[0-9a-f]{7,}?')] = None
    message: Optional[str] = None
    parents: Optional[List[BaseCommit]] = None
    summary: Optional[Summary] = None


class Comment(Object):
    content: Optional[Content] = None
    created_on: Optional[datetime] = None
    deleted: Optional[bool] = None
    id: Optional[int] = None
    inline: Optional[Inline] = None
    links: Optional[Links1] = None
    parent: Optional[Comment] = None
    updated_on: Optional[datetime] = None
    user: Optional[Account] = None


class DeploymentStateCompleted(DeploymentState):
    completion_date: Optional[datetime] = Field(
        None, description='The timestamp when the deployment completed.'
    )
    deployer: Optional[Account] = None
    name: Optional[Name] = Field(
        None, description='The name of deployment state (COMPLETED).'
    )
    start_date: Optional[datetime] = Field(
        None, description='The timestamp when the deployment was started.'
    )
    status: Optional[DeploymentStateCompletedStatus] = None
    url: Optional[AnyUrl] = Field(None, description='Link to the deployment result.')


class DeploymentStateInProgress(DeploymentState):
    deployer: Optional[Account] = None
    name: Optional[Name4] = Field(
        None, description='The name of deployment state (IN_PROGRESS).'
    )
    start_date: Optional[datetime] = Field(
        None, description='The timestamp when the deployment was started.'
    )
    url: Optional[AnyUrl] = Field(None, description='Link to the deployment result.')


class Group(Object):
    full_slug: Optional[str] = Field(
        None,
        description="The concatenation of the workspace's slug and the group's slug,\nseparated with a colon (e.g. `acme:developers`)\n",
    )
    links: Optional[Links5] = None
    name: Optional[str] = None
    owner: Optional[Account] = None
    slug: Optional[str] = Field(
        None,
        description='The "sluggified" version of the group\'s name. This contains only ASCII\ncharacters and can therefore be slightly different than the name',
    )
    workspace: Optional[Workspace] = None


class PaginatedAccounts(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Account]] = Field(None, min_length=0)


class PaginatedChangeset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[BaseCommit]] = Field(None, min_length=0)


class PaginatedPipelineKnownHosts(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[PipelineKnownHost]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedPipelineSchedules(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[PipelineSchedule]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedPipelineSteps(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[PipelineStep]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedReports(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Report]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class Participant(Object):
    approved: Optional[bool] = None
    participated_on: Optional[datetime] = Field(
        None,
        description="The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.",
    )
    role: Optional[Role] = None
    state: Optional[State3] = None
    user: Optional[Account] = None


class SearchContentMatch(BaseModel):
    lines: Optional[List[SearchLine]] = None


class Snippet(Object):
    created_on: Optional[datetime] = None
    creator: Optional[Account] = None
    id: Optional[conint(ge=0)] = None
    is_private: Optional[bool] = None
    owner: Optional[Account] = None
    scm: Optional[Scm] = Field(None, description='The DVCS used to store the snippet.')
    title: Optional[str] = None
    updated_on: Optional[datetime] = None


class SnippetComment(Object):
    links: Optional[Links17] = None
    snippet: Optional[Snippet] = None


class SnippetCommit(BaseCommit):
    links: Optional[Links18] = None
    snippet: Optional[Snippet] = None


class SshAccountKey(SshKey):
    owner: Optional[Account] = None


class Team(Account):
    links: Optional[TeamLinks] = None


class User(Account):
    account_id: Optional[str] = Field(
        None, description="The user's Atlassian account ID."
    )
    account_status: Optional[str] = Field(
        None,
        description='The status of the account. Currently the only possible value is "active", but more values may be added in the future.',
    )
    has_2fa_enabled: Optional[bool] = None
    is_staff: Optional[bool] = None
    links: Optional[UserLinks] = None
    nickname: Optional[str] = Field(
        None,
        description='Account name defined by the owner. Should be used instead of the "username" field. Note that "nickname" cannot be used in place of "username" in URLs and queries, as "nickname" is not guaranteed to be unique.',
    )
    website: Optional[str] = None


class WorkspaceMembership(Object):
    links: Optional[Links22] = None
    user: Optional[Account] = None
    workspace: Optional[Workspace] = None


class Branchrestriction(Object):
    groups: Optional[List[Group]] = Field(None, min_length=0)
    users: Optional[List[Account]] = Field(None, min_length=0)


class DefaultReviewerAndType(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    reviewer_type: Optional[str] = None
    type: str
    user: Optional[User] = None


class PaginatedBranchrestrictions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Branchrestriction]] = Field(None, min_length=0)


class PaginatedDefaultReviewerAndType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[DefaultReviewerAndType]] = Field(None, min_length=0)


class PaginatedSnippetComments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[SnippetComment]] = Field(None, min_length=0)


class PaginatedSnippetCommit(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[SnippetCommit]] = Field(None, min_length=0)


class PaginatedSnippets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Snippet]] = Field(None, min_length=0)


class PaginatedSshUserKeys(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[SshAccountKey]] = Field(None, min_length=0)


class PaginatedWorkspaceMemberships(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[WorkspaceMembership]] = Field(None, min_length=0)


class Project(Object):
    created_on: Optional[datetime] = None
    description: Optional[str] = None
    has_publicly_visible_repos: Optional[bool] = Field(
        None,
        description='\nIndicates whether the project contains publicly visible repositories.\nNote that private projects cannot contain public repositories.',
    )
    is_private: Optional[bool] = Field(
        None,
        description='\nIndicates whether the project is publicly accessible, or whether it is\nprivate to the team and consequently only visible to team members.\nNote that private projects cannot contain public repositories.',
    )
    key: Optional[str] = Field(None, description="The project's key.")
    links: Optional[Links10] = None
    name: Optional[str] = Field(None, description='The name of the project.')
    owner: Optional[Team] = None
    updated_on: Optional[datetime] = None
    uuid: Optional[str] = Field(None, description="The project's immutable id.")


class ProjectDeployKey(Object):
    added_on: Optional[datetime] = None
    comment: Optional[str] = Field(
        None, description='The comment parsed from the deploy key (if present)'
    )
    created_by: Optional[Account] = None
    key: Optional[str] = Field(None, description='The deploy key value.')
    label: Optional[str] = Field(
        None, description='The user-defined label for the deploy key'
    )
    last_used: Optional[datetime] = None
    links: Optional[Links11] = None
    project: Optional[Project] = None


class PaginatedProjectDeployKeys(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[ProjectDeployKey]] = Field(None, min_length=0)


class PaginatedProjects(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Project]] = Field(None, min_length=0)


class Development(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    branch: Optional[Branch] = None
    name: str = Field(
        ...,
        description='Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class Production(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    branch: Optional[Branch] = None
    name: str = Field(
        ...,
        description='Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class BranchingModel(Object):
    branch_types: Optional[List[BranchType]] = Field(
        None, description='The active branch types.', max_length=4, min_length=0
    )
    development: Optional[Development] = None
    production: Optional[Production] = None


class Commit(BaseCommit):
    participants: Optional[List[Participant]] = Field(None, min_length=0)
    repository: Optional[Repository] = None


class CommitComment(Comment):
    commit: Optional[Commit] = None


class CommitFile(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    attributes: Optional[Attributes] = None
    commit: Optional[Commit] = None
    escaped_path: Optional[str] = Field(
        None,
        description='The escaped version of the path as it appears in a diff. If the path does not require escaping this will be the same as path.',
    )
    path: Optional[str] = Field(None, description='The path in the repository')
    type: str


class DeployKey(Object):
    added_on: Optional[datetime] = None
    comment: Optional[str] = Field(
        None, description='The comment parsed from the deploy key (if present)'
    )
    key: Optional[str] = Field(None, description='The deploy key value.')
    label: Optional[str] = Field(
        None, description='The user-defined label for the deploy key'
    )
    last_used: Optional[datetime] = None
    links: Optional[Links4] = None
    owner: Optional[Account] = None
    repository: Optional[Repository] = None


class Deployment(Object):
    environment: Optional[DeploymentEnvironment] = None
    release: Optional[DeploymentRelease] = None
    state: Optional[DeploymentState] = None
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the deployment.'
    )


class DeploymentRelease(Object):
    commit: Optional[Commit] = None
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the release was created.'
    )
    name: Optional[str] = Field(None, description='The name of the release.')
    url: Optional[AnyUrl] = Field(
        None, description='Link to the pipeline that produced the release.'
    )
    uuid: Optional[str] = Field(None, description='The UUID identifying the release.')


class Diffstat(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    lines_added: Optional[int] = None
    lines_removed: Optional[int] = None
    new: Optional[CommitFile] = None
    old: Optional[CommitFile] = None
    status: Optional[Status] = None
    type: str


class EffectiveRepoBranchingModel(Object):
    branch_types: Optional[List[BranchType2]] = Field(
        None, description='The active branch types.', max_length=4, min_length=0
    )
    development: Optional[Development] = None
    production: Optional[Production] = None


class Issue(Object):
    assignee: Optional[Account] = None
    component: Optional[Component] = None
    content: Optional[Content1] = None
    created_on: Optional[datetime] = None
    edited_on: Optional[datetime] = None
    id: Optional[int] = None
    kind: Optional[Kind3] = None
    links: Optional[Links6] = None
    milestone: Optional[Milestone] = None
    priority: Optional[Priority] = None
    reporter: Optional[Account] = None
    repository: Optional[Repository] = None
    state: Optional[State1] = None
    title: Optional[str] = None
    updated_on: Optional[datetime] = None
    version: Optional[Version] = None
    votes: Optional[int] = None


class IssueChange(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    changes: Optional[Changes] = None
    created_on: Optional[datetime] = None
    issue: Optional[Issue] = None
    links: Optional[Links8] = None
    message: Optional[Message] = None
    name: Optional[str] = None
    type: str
    user: Optional[Account] = None


class IssueComment(Comment):
    issue: Optional[Issue] = None


class PaginatedBranches(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Branch]] = Field(None, min_length=0)


class PaginatedCommitComments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[CommitComment]] = Field(None, min_length=0)


class PaginatedDeployKeys(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[DeployKey]] = Field(None, min_length=0)


class PaginatedDeployments(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Deployment]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedDiffstats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 500 with 5000 being the maximum allowed value.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Diffstat]] = Field(None, min_length=0)


class PaginatedFiles(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[CommitFile]] = Field(None, min_length=0)


class PaginatedIssueComments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[IssueComment]] = Field(None, min_length=0)


class PaginatedIssues(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Issue]] = Field(None, min_length=0)


class PaginatedLogEntries(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[IssueChange]] = Field(None, min_length=0)


class PaginatedPipelines(BaseModel):
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Pipeline]] = Field(
        None, description='The values of the current page.', min_length=0
    )


class PaginatedPullrequestComments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[PullrequestComment]] = Field(None, min_length=0)


class PaginatedPullrequests(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Pullrequest]] = Field(None, min_length=0)


class PaginatedRefs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Ref]] = Field(None, min_length=0)


class PaginatedRepositories(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Repository]] = Field(None, min_length=0)


class PaginatedRepositoryGroupPermissions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[RepositoryGroupPermission]] = Field(None, min_length=0)


class PaginatedRepositoryPermissions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[RepositoryPermission]] = Field(None, min_length=0)


class PaginatedRepositoryUserPermissions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[RepositoryUserPermission]] = Field(None, min_length=0)


class PaginatedTags(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Tag]] = Field(None, min_length=0)


class PaginatedTreeentries(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    values: Optional[List[Treeentry]] = Field(None, min_length=0)


class Pipeline(Object):
    build_number: Optional[int] = Field(
        None, description='The build number of the pipeline.'
    )
    build_seconds_used: Optional[int] = Field(
        None, description='The number of build seconds used by this pipeline.'
    )
    completed_on: Optional[datetime] = Field(
        None,
        description='The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.',
    )
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the pipeline was created.'
    )
    creator: Optional[Account] = None
    repository: Optional[Repository] = None
    state: Optional[PipelineState] = None
    target: Optional[PipelineTarget] = None
    trigger: Optional[PipelineTrigger] = None
    uuid: Optional[str] = Field(None, description='The UUID identifying the pipeline.')


class PipelineCommitTarget(PipelineTarget):
    commit: Optional[Commit] = None
    selector: Optional[PipelineSelector] = None


class PipelineRefTarget(PipelineTarget):
    commit: Optional[Commit] = None
    ref_name: Optional[str] = Field(None, description='The name of the reference.')
    ref_type: Optional[RefType] = Field(
        None, description='The type of reference (branch/tag).'
    )
    selector: Optional[PipelineSelector] = None


class PipelineScheduleExecutionExecuted(PipelineScheduleExecution):
    pipeline: Optional[Pipeline] = None


class PipelinesConfig(Object):
    enabled: Optional[bool] = Field(
        None, description='Whether Pipelines is enabled for the repository.'
    )
    repository: Optional[Repository] = None


class Pullrequest(Object):
    author: Optional[Account] = None
    close_source_branch: Optional[bool] = Field(
        None,
        description='A boolean flag indicating if merging the pull request closes the source branch.',
    )
    closed_by: Optional[Account] = None
    comment_count: Optional[conint(ge=0)] = Field(
        None, description='The number of comments for a specific pull request.'
    )
    created_on: Optional[datetime] = Field(
        None, description='The ISO8601 timestamp the request was created.'
    )
    destination: Optional[PullrequestEndpoint] = None
    id: Optional[int] = Field(
        None,
        description="The pull request's unique ID. Note that pull request IDs are only unique within their associated repository.",
    )
    links: Optional[Links12] = None
    merge_commit: Optional[MergeCommit] = Field(None, title='Pull Request Commit')
    participants: Optional[List[Participant]] = Field(
        None,
        description="        The list of users that are collaborating on this pull request.\n        Collaborators are user that:\n\n        * are added to the pull request as a reviewer (part of the reviewers\n          list)\n        * are not explicit reviewers, but have commented on the pull request\n        * are not explicit reviewers, but have approved the pull request\n\n        Each user is wrapped in an object that indicates the user's role and\n        whether they have approved the pull request. For performance reasons,\n        the API only returns this list when an API requests a pull request by\n        id.\n        ",
    )
    reason: Optional[str] = Field(
        None,
        description='Explains why a pull request was declined. This field is only applicable to pull requests in rejected state.',
    )
    rendered: Optional[Rendered] = Field(
        None,
        description='User provided pull request text, interpreted in a markup language and rendered in HTML',
        title='Rendered Pull Request Markup',
    )
    reviewers: Optional[List[Account]] = Field(
        None,
        description="The list of users that were added as reviewers on this pull request when it was created. For performance reasons, the API only includes this list on a pull request's `self` URL.",
    )
    source: Optional[PullrequestEndpoint] = None
    state: Optional[State4] = Field(
        None, description="The pull request's current status."
    )
    summary: Optional[Summary1] = None
    task_count: Optional[conint(ge=0)] = Field(
        None, description='The number of open tasks for a specific pull request.'
    )
    title: Optional[str] = Field(None, description='Title of the pull request.')
    updated_on: Optional[datetime] = Field(
        None, description='The ISO8601 timestamp the request was last updated.'
    )


class PullrequestComment(Comment):
    pullrequest: Optional[Pullrequest] = None


class PullrequestEndpoint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    branch: Optional[Branch1] = Field(None, title='Pull Request Branch')
    commit: Optional[Commit2] = Field(None, title='Pull Request Commit')
    repository: Optional[Repository] = None


class Ref(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    links: Optional[Links13] = None
    name: Optional[str] = Field(None, description='The name of the ref.')
    target: Optional[Commit] = None
    type: str


class Repository(Object):
    created_on: Optional[datetime] = None
    description: Optional[str] = None
    fork_policy: Optional[ForkPolicy] = Field(
        None,
        description='\nControls the rules for forking this repository.\n\n* **allow_forks**: unrestricted forking\n* **no_public_forks**: restrict forking to private forks (forks cannot\n  be made public later)\n* **no_forks**: deny all forking\n',
    )
    full_name: Optional[str] = Field(
        None,
        description='The concatenation of the repository owner\'s username and the slugified name, e.g. "evzijst/interruptingcow". This is the same string used in Bitbucket URLs.',
    )
    has_issues: Optional[bool] = None
    has_wiki: Optional[bool] = None
    is_private: Optional[bool] = None
    language: Optional[str] = None
    links: Optional[Links14] = None
    mainbranch: Optional[Branch] = None
    name: Optional[str] = None
    owner: Optional[Account] = None
    parent: Optional[Repository] = None
    project: Optional[Project] = None
    scm: Optional[Scm] = None
    size: Optional[int] = None
    updated_on: Optional[datetime] = None
    uuid: Optional[str] = Field(
        None,
        description="The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.",
    )


class RepositoryGroupPermission(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    group: Optional[Group] = None
    links: Optional[Links15] = None
    permission: Optional[Permission] = None
    repository: Optional[Repository] = None
    type: str


class RepositoryPermission(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    permission: Optional[Permission] = None
    repository: Optional[Repository] = None
    type: str
    user: Optional[User] = None


class RepositoryUserPermission(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    links: Optional[Links16] = None
    permission: Optional[Permission] = None
    repository: Optional[Repository] = None
    type: str
    user: Optional[User] = None


class SearchCodeSearchResult(BaseModel):
    content_match_count: Optional[int] = None
    content_matches: Optional[List[SearchContentMatch]] = None
    file: Optional[CommitFile] = None
    path_matches: Optional[List[SearchSegment]] = None
    type: Optional[str] = None


class SearchResultPage(BaseModel):
    next: Optional[AnyUrl] = None
    page: Optional[int] = None
    pagelen: Optional[int] = None
    previous: Optional[AnyUrl] = None
    query_substituted: Optional[bool] = None
    size: Optional[int] = None
    values: Optional[List[SearchCodeSearchResult]] = None


class Treeentry(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    commit: Optional[Commit] = None
    path: Optional[str] = Field(None, description='The path in the repository')
    type: str


class Branch(Ref):
    default_merge_strategy: Optional[str] = Field(
        None,
        description='The default merge strategy for pull requests targeting this branch.',
    )
    merge_strategies: Optional[List[MergeStrategy]] = Field(
        None,
        description='Available merge strategies for pull requests targeting this branch.',
    )


class Tag(Ref):
    date: Optional[datetime] = Field(
        None, description='The date that the tag was created, if available'
    )
    message: Optional[str] = Field(
        None, description='The message associated with the tag, if available.'
    )
    tagger: Optional[Author] = None


BaseCommit.model_rebuild()
Comment.model_rebuild()
Development.model_rebuild()
Production.model_rebuild()
Commit.model_rebuild()
CommitComment.model_rebuild()
DeployKey.model_rebuild()
Deployment.model_rebuild()
Issue.model_rebuild()
IssueComment.model_rebuild()
PaginatedBranches.model_rebuild()
PaginatedPipelines.model_rebuild()
PaginatedPullrequestComments.model_rebuild()
PaginatedPullrequests.model_rebuild()
PaginatedRefs.model_rebuild()
PaginatedRepositories.model_rebuild()
PaginatedRepositoryGroupPermissions.model_rebuild()
PaginatedRepositoryPermissions.model_rebuild()
PaginatedRepositoryUserPermissions.model_rebuild()
PaginatedTags.model_rebuild()
PaginatedTreeentries.model_rebuild()
Pipeline.model_rebuild()
PipelinesConfig.model_rebuild()
Pullrequest.model_rebuild()
PullrequestComment.model_rebuild()
PullrequestEndpoint.model_rebuild()
Repository.model_rebuild()
